meta {
  name: Login
  type: http
  seq: 3
}

post {
  url: {{apiUrl}}/auth/login
}

headers {
  Content-Type: application/json
}

body:json {
  {
    "username": "{{testUsername}}",
    "password": "{{testPassword}}"
  }
}

docs {
  # User Login
  
  Authenticates a user with username and password.
  
  **Request Fields:**
  - username: Required, max 50 characters
  - password: Required, max 100 characters
  
  **Expected Response (200):**
  ```json
  {
    "success": true,
    "message": "Login successful",
    "data": {
      "token": "jwt_token",
      "refreshToken": "refresh_token", 
      "expiresAt": "2024-01-01T00:00:00Z",
      "user": {
        "idUser": 1,
        "username": "testuser",
        "email": "testuser@example.com",
        "isAdmin": false
      }
    }
  }
  ```
  
  **Note:** Run registration test first to create test user!
}

assert {
  res.status: eq 200
  res.body.success: eq true
  res.body.data.token: isDefined
}

script:post-response {
  if (res.getStatus() === 200) {
    bru.setVar("authToken", res.getBody().data.token);
    bru.setVar("refreshToken", res.getBody().data.refreshToken);
    bru.setVar("currentUserId", res.getBody().data.user.idUser);
  }
}

tests {
  test("Login successful", function() {
    expect(res.getStatus()).to.equal(200);
    expect(res.getBody().success).to.be.true;
    expect(res.getBody().data.token).to.be.a('string');
    expect(res.getBody().data.refreshToken).to.be.a('string');
  });
  
  test("JWT token format", function() {
    const token = res.getBody().data.token;
    expect(token.split('.')).to.have.lengthOf(3); // JWT has 3 parts
  });
  
  test("Token expiration set", function() {
    expect(res.getBody().data.expiresAt).to.be.a('string');
    const expiresAt = new Date(res.getBody().data.expiresAt);
    expect(expiresAt.getTime()).to.be.greaterThan(Date.now());
  });
} 